- JDK 동적 프록시 : 인터페이스 기반 프록시 구현
: 의존관계 주입 시 구체 클래스에 의존 X
- CGLIB : 구체클래스를 상속 받아서 프록시 구현

그러나, CGLIB 역시 문제가 있다.
1. 대상 클래스에는 기본 생성자가 있어야 한다.
- 구체 클래스를 '상속'받기 때문에, 자식 클래스의 생성자에서 부모 클래스의 생성자를 호출해야 한다.
- CGLIB는 상속 받을 때 대상 클래스의 기본 생성자를 호출하기 때문에, 기본으로 필요하다.
: 스프링에서는 objenesis 라이브러리를 통해 생성자 호출 없이 객체 생성이 가능하도록 했음

2. 생성자가 2번 호출된다.
- 자식 클래스의 생성자를 호출하면, 부모 클래스의 생성자도 호출해야 한다.
- 실제 target 객체를 생성할 때 1번, 프록시 객체를 생성할 때 부모 클래스 생성자 호출
ex)
CGLIB는 구체클래스에 의존한다.
- 실제 target의 객체를 생성할 때 (MemberServiceImpl)
- 프록시 객체를 생성할 때 -> (MemberServiceImpl)
: 마찬가지로 objenesis 사용

3. final 키워드 클래스, 메서드 사용 불가.
- final이 있으면 상속 불가능, 메서드에 있으면 오버라이딩이 안 되니까!

** 스프링 부트에서는 기본적으로 CGLIB 사용
(JDK에서 안 되는 구체 클래스 주입 가능)