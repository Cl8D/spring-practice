** 스프링 AOP
- Pointcut
: 부가기능을 어디에 사용할 것인지, 어디에 사용하지 않을지 적용.
클래스와 메서드 이름으로 필터링!
: 대상 여부를 확인하는 일종의 '필터' 역할

- Advice
: 프록시가 호출하는 부가 기능, 프록시 로직.
: 부가 기능을 로직만 담당.

- Advisor
: 하나의 포인트컷과 하나의 어드바이스를 가지고 있음.

==> 포인트컷으로 '어디에' 적용할지 선택, 어디바이스로 '어떤' 로직을 적용할지 선택.
==> 그리고, 이 두 가지를 모두 알고 있는 것이 어드바이저!

왜 이렇게 하는가? ==> 필터링 + 부가 기능을 하는 건 SRP 위배.
역할을 분명하게 분리하도록 하자!

----------------

* 빈 후처리기
: 스프링이 빈 저장소에 등록할 목적으로 생성한 객체를
빈 저장소에 등록하기 직전에 조작하고 싶다면 빈 후처리기를 사용한다.

** 빈 등록 과정
1. 스프링 빈 대상이 되는 객체를 관리한다.
2. 생성된 객체를 빈 저장소에 등록하기 전에, 빈 후처리기에 전달한다.
3. 빈 후처리기는 전달된 스프링 빈 객체를 조작하거나, 다른 객체로 바꿔치기 할 수 있다
4. 빈 후처리기는 빈을 반환한다. 그대로 반환하면 빈이 등록되고, 바꿔치기 하면 다른 객체가 저장소에 저장된다.

---------------

* 포인트컷.
> 1. 프록시 적용 대상 여부를 체크해서 꼭 필요한 곳에만 프록시를 적용한다. (빈 후처리기 - 자동 프록시 생성)
> 2. 프록시의 어떤 메서드가 호출 되었을 때 어드바이스를 적용할지 판단한다. (프록시 내부)

----------------

* 자동 프록시 생성기 - AnnotationAwareAspectJAutoProxyCreator
: 자동으로 프록시를 생성해주는 빈 후처리기.
: 스프링 빈으로 등록된 Advisor를 자동으로 찾아서, 프록시가 필요한 곳에 자동으로 적용해준다.
: Advisor는 Pointcut + advice이기 때문에, 포인트 컷을 통해 어떤 스프링 빈에 프록시를 적용해야 할지 알 수 있다.

동작 과정)
1. 스프링 빈 대상이 되는 객체 생성
2. 생성된 객체를 빈 후처리기에 전달.
3. 빈 후처리기는 컨테이너에 등록된 모든 Advisor를 조회한다.
4. 조회한 Advisor에 있는 포인트컷을 통해 해당 객체가 프록시를 적용할 대상인지 판단한다.
- 객체의 클래스 정보, 객체의 모든 메서드를 포인트컷에 하나하나 매칭한다.
- 클래스의 메서드 중 하나라도 포인트컷 조건에 만족한다면 프록시 적용 대상이 된다.
5. 적용 대상이면 프록시 생성하여 빈으로 등록하고, 아니라면 원본 객체를 빈으로 등록한다.
6. 반환된 객체를 스프링 빈으로 등록이 된다.

-----------------------

* 포인트컷 2가지 사용
1. 프록시 적용 여부 판단 - 생성 단계
: 자동 프록시 생성기는 포인트컷을 사용해서 해당 빈이 프록시 생성할 필요가 있는지 없는지 체크한다.
: 클래스 + 메서드 조건 비교 후, 포인트컷 조건에 하나하나 매칭한다.
--> 조건에 맞는 것이 하나라도 있으면 프록시 생성한다.

2. 어드바이스 적용 여부 판단 - 사용 단계
: 포인트컷을 보고 어드바이스를 적용할지 말지 판단한다.
: 포인트컷 조건에 만족하면 어드바이스를 호출->target 호출
: 만족하지 않으면 바로 targetㅇ르 호출한다.

